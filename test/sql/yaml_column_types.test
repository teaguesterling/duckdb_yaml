# name: test/sql/yaml_column_types.test
# description: Test YAML column type specification
# group: [yaml]

require yaml

# Create a test YAML file with mixed types
statement ok
COPY (
    SELECT '
name: John Doe
age: 30
active: true
score: 95.5
joined: 2023-01-15
' AS content
) TO '__TEST_DIR__/test_typed.yaml' (FORMAT CSV, HEADER FALSE);

# Test reading with auto-detection (default)
query IIIIT
SELECT * FROM read_yaml('__TEST_DIR__/test_typed.yaml');
----
John Doe	30	true	95.5	2023-01-15

# Test reading with explicit column types
query IIIT
SELECT * FROM read_yaml('__TEST_DIR__/test_typed.yaml', 
    columns={
        'name': 'VARCHAR',
        'age': 'INTEGER', 
        'score': 'DOUBLE',
        'joined': 'DATE'
    });
----
John Doe	30	95.5	2023-01-15

# Test type casting with explicit types
query SSSS
SELECT * FROM read_yaml('__TEST_DIR__/test_typed.yaml', 
    columns={
        'name': 'VARCHAR',
        'age': 'VARCHAR', 
        'active': 'VARCHAR',
        'score': 'VARCHAR'
    });
----
John Doe	30	true	95.5

# Test with wrong type specification - should cast or error
query ITIT
SELECT * FROM read_yaml('__TEST_DIR__/test_typed.yaml', 
    columns={
        'name': 'VARCHAR',
        'age': 'BIGINT', 
        'active': 'BOOLEAN',
        'score': 'BIGINT'
    });
----
John Doe	30	true	96

# Create a file with arrays and objects
statement ok
COPY (
    SELECT '
user:
  name: Alice
  tags: [admin, user, superuser]
  settings:
    theme: dark
    language: en
count: 42
' AS content
) TO '__TEST_DIR__/test_nested.yaml' (FORMAT CSV, HEADER FALSE);

# Test reading nested structures with specified types
query II
SELECT * FROM read_yaml('__TEST_DIR__/test_nested.yaml', 
    columns={
        'user': 'STRUCT(name VARCHAR, tags VARCHAR[], settings STRUCT(theme VARCHAR, language VARCHAR))',
        'count': 'INTEGER'
    });
----
{'name': Alice, 'tags': [admin, user, superuser], 'settings': {'theme': dark, 'language': en}}	42

# Test column subset selection
query IS
SELECT count, name FROM read_yaml('__TEST_DIR__/test_typed.yaml',
    columns={
        'name': 'VARCHAR',
        'count': 'INTEGER',
        'age': 'INTEGER'
    });
----
NULL	John Doe

# Test auto_detect=false with columns parameter
query SS
SELECT * FROM read_yaml('__TEST_DIR__/test_typed.yaml', 
    auto_detect=false,
    columns={
        'name': 'VARCHAR',
        'age': 'VARCHAR'
    });
----
John Doe	30

# Test invalid column types
statement error
SELECT * FROM read_yaml('__TEST_DIR__/test_typed.yaml', 
    columns={
        'name': 'INVALIDTYPE'
    });

# Test with missing columns in data - should return NULL
statement ok
COPY (
    SELECT '
name: Bob
age: 25
' AS content
) TO '__TEST_DIR__/test_partial.yaml' (FORMAT CSV, HEADER FALSE);

query IST
SELECT * FROM read_yaml('__TEST_DIR__/test_partial.yaml',
    columns={
        'name': 'VARCHAR',
        'age': 'INTEGER',
        'city': 'VARCHAR'
    });
----
Bob	25	NULL