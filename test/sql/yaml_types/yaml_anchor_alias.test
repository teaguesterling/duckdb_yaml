# name: test/sql/yaml_types/yaml_anchor_alias.test
# description: Test YAML anchor and alias resolution
# group: [yaml]

require yaml

# Test YAML with anchors and aliases
statement ok
CREATE TABLE yaml_with_anchors(y YAML);

statement ok
INSERT INTO yaml_with_anchors VALUES 
('defaults: &defaults
  adapter: postgres
  host: localhost
  port: 5432

development:
  database: myapp_development
  <<: *defaults

test:
  database: myapp_test
  <<: *defaults

production:
  database: myapp_production
  <<: *defaults
  host: production.example.com');

# Test basic structure
query I
SELECT y FROM yaml_with_anchors;
----
defaults: &defaults
  adapter: postgres
  host: localhost
  port: 5432

development:
  database: myapp_development
  <<: *defaults

test:
  database: myapp_test
  <<: *defaults

production:
  database: myapp_production
  <<: *defaults
  host: production.example.com

# Test anchor resolution in JSON conversion
query I
SELECT yaml_to_json(y) AS json_val FROM yaml_with_anchors;
----
{"defaults":{"adapter":"postgres","host":"localhost","port":5432},"development":{"database":"myapp_development","adapter":"postgres","host":"localhost","port":5432},"test":{"database":"myapp_test","adapter":"postgres","host":"localhost","port":5432},"production":{"database":"myapp_production","adapter":"postgres","host":"production.example.com","port":5432}}

# Verify specific values were resolved properly
query I
SELECT json_extract_string(yaml_to_json(y), '$.development.adapter') FROM yaml_with_anchors;
----
postgres

query I
SELECT json_extract_string(yaml_to_json(y), '$.test.host') FROM yaml_with_anchors;
----
localhost

# Verify that production's host was not inherited from the anchor
query I
SELECT json_extract_string(yaml_to_json(y), '$.production.host') FROM yaml_with_anchors;
----
production.example.com

# Test more complex anchor structures
statement ok
CREATE TABLE complex_anchors(y YAML);

statement ok
INSERT INTO complex_anchors VALUES 
('# Anchors with arrays and nested structures
base: &base
  name: Base Item
  created_at: 2023-01-01
  tags: &tags
    - important
    - critical
  metadata: &metadata
    version: 1.0
    environment: development

item1:
  <<: *base
  id: 1
  tags: 
    - *tags
    - custom
  description: Extended item

item2:
  <<: *base
  id: 2
  metadata:
    <<: *metadata
    environment: testing');

# Test complex anchor resolution
query I
SELECT yaml_to_json(y) AS json_val FROM complex_anchors;
----
{"base":{"name":"Base Item","created_at":"2023-01-01","tags":["important","critical"],"metadata":{"version":1.0,"environment":"development"}},"item1":{"name":"Base Item","created_at":"2023-01-01","tags":[["important","critical"],"custom"],"metadata":{"version":1.0,"environment":"development"},"id":1,"description":"Extended item"},"item2":{"name":"Base Item","created_at":"2023-01-01","tags":["important","critical"],"metadata":{"version":1.0,"environment":"testing"},"id":2}}

# Test nested tag resolution
query I
SELECT json_extract_string(yaml_to_json(y), '$.item1.name') FROM complex_anchors;
----
Base Item

query I
SELECT json_extract_string(yaml_to_json(y), '$.item2.metadata.environment') FROM complex_anchors;
----
testing

# Test YAML sequence anchors
statement ok
CREATE TABLE sequence_anchors(y YAML);

statement ok
INSERT INTO sequence_anchors VALUES 
('# Sequence anchors
steps: &steps
  - step: Build
    command: make
  - step: Test
    command: make test

basic_job:
  name: Basic
  steps: *steps

extended_job:
  name: Extended
  steps:
    - *steps
    - step: Deploy
      command: make deploy');

# Test sequence anchor resolution
query I
SELECT yaml_to_json(y) AS json_val FROM sequence_anchors;
----
{"steps":[{"step":"Build","command":"make"},{"step":"Test","command":"make test"}],"basic_job":{"name":"Basic","steps":[{"step":"Build","command":"make"},{"step":"Test","command":"make test"}]},"extended_job":{"name":"Extended","steps":[[{"step":"Build","command":"make"},{"step":"Test","command":"make test"}],{"step":"Deploy","command":"make deploy"}]}}

# Verify basic_job steps
query I
SELECT json_extract_string(yaml_to_json(y), '$.basic_job.steps[0].step') FROM sequence_anchors;
----
Build

# Test nested anchor types
statement ok
CREATE TABLE nested_anchors(y YAML);

statement ok
INSERT INTO nested_anchors VALUES 
('server: &server
  host: example.com
  port: 80

auth: &auth
  username: admin
  password: secret

config:
  server: *server
  timeout: 30
  auth: *auth

backup_config:
  <<: *server
  path: /backup
  auth: *auth');

# Test nested anchor resolution
query I
SELECT yaml_to_json(y) AS json_val FROM nested_anchors;
----
{"server":{"host":"example.com","port":80},"auth":{"username":"admin","password":"secret"},"config":{"server":{"host":"example.com","port":80},"timeout":30,"auth":{"username":"admin","password":"secret"}},"backup_config":{"host":"example.com","port":80,"path":"/backup","auth":{"username":"admin","password":"secret"}}}

# Clean up
statement ok
DROP TABLE yaml_with_anchors;

statement ok
DROP TABLE complex_anchors;

statement ok
DROP TABLE sequence_anchors;

statement ok
DROP TABLE nested_anchors;
