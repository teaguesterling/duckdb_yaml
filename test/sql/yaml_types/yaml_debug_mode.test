# name: test/sql/yaml_types/yaml_debug_mode.test
# description: Test the debug mode functionality for the ValueToYAML function
# group: [yaml]
# disabled: true

require yaml

# Enable debug mode
statement ok
SELECT yaml_debug_enable();

# Test if debug mode is enabled
query I
SELECT yaml_debug_is_enabled();
----
true

# Test with simple values
statement ok
SELECT yaml_debug_value_to_yaml('Simple string');

statement ok
SELECT yaml_debug_value_to_yaml(42);

statement ok
SELECT yaml_debug_value_to_yaml(3.14);

statement ok
SELECT yaml_debug_value_to_yaml(TRUE);

statement ok
SELECT yaml_debug_value_to_yaml(NULL);

# Test with complex values
statement ok
SELECT yaml_debug_value_to_yaml([1, 2, 3]);

statement ok
SELECT yaml_debug_value_to_yaml({'name': 'John', 'age': 30});

statement ok
SELECT yaml_debug_value_to_yaml([{'a': 1}, {'b': [2, 3, {'c': 4}]}]);

# Test with nested structures
statement ok
SELECT yaml_debug_value_to_yaml({'a': {'b': {'c': {'d': 'deep'}}}});

# Test with special characters
statement ok
SELECT yaml_debug_value_to_yaml('Special characters: \t\n\r\b\f\\\'\"');

# Test with special string values
statement ok
SELECT yaml_debug_value_to_yaml('null');

statement ok
SELECT yaml_debug_value_to_yaml('true');

statement ok
SELECT yaml_debug_value_to_yaml('yes');

# Compare with regular value_to_yaml
query I
SELECT yaml_debug_value_to_yaml([1, 2, 3]) = value_to_yaml([1, 2, 3]);
----
true

# Disable debug mode
statement ok
SELECT yaml_debug_disable();

# Verify it's disabled
query I
SELECT yaml_debug_is_enabled();
----
false