# name: test/sql/yaml_types/yaml_segfault_fix_test.test
# description: Test the fixed value_to_yaml function that should not segfault with problematic input
# group: [yaml]
# disabled: false

require yaml

require json

# Enable debug mode for the test (use the safer implementation)
statement ok
SELECT yaml_debug_enable();

# Test with all the previously problematic cases that would segfault
# These should all work now with the fixed implementation

# Simple cases should still work
query I
SELECT yaml_debug_value_to_yaml('Simple string');
----
Simple string

query I
SELECT yaml_debug_value_to_yaml(42);
----
42

query I
SELECT yaml_debug_value_to_yaml(TRUE);
----
true

# Nested lists that previously caused issues
query I
SELECT yaml_debug_value_to_yaml([1::JSON, 2::JSON, [3, 4]::JSON]);
----
[1, 2, [3, 4]]

# Deep nesting that might cause stack overflow with recursive functions
query I
SELECT yaml_debug_value_to_yaml({'a': {'b': {'c': {'d': {'e': 'deep'}}}}});
----
{a: {b: {c: {d: {e: deep}}}}}

# Mixed complex types
query I
SELECT yaml_debug_value_to_yaml({'a': 1, 'b': {'c': [2, 3]});
----
{a: 1, b: {c: [2, 3]}}

# Comparison between debug and regular implementation
query I
SELECT length(yaml_debug_value_to_yaml([1, 2, 3])) > 0;
----
true

query I
SELECT yaml_debug_value_to_yaml([1, 2, 3]) = value_to_yaml([1, 2, 3]);
----
true

# Special strings that previously caused issues
query I
SELECT yaml_debug_value_to_yaml('');
----


query I
SELECT yaml_debug_value_to_yaml('Special characters: !@#$%^&*()');
----
'Special characters: !@#$%^&*()'

# Turn off debug mode
statement ok
SELECT yaml_debug_disable();

# Verify it's disabled
query I
SELECT yaml_debug_is_enabled();
----
false
