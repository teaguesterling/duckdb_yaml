# name: test/sql/yaml_types/yaml_types_multi.test
# description: Test YAML types with multi-document and complex YAML
# group: [yaml]

require yaml

require json

# Test with a complex multi-document YAML
statement ok
CREATE TABLE complex_yaml(y YAML);

statement ok
INSERT INTO complex_yaml VALUES 
('---
type: user
metadata:
  version: 1.0
  created_at: 2023-05-15T10:30:00Z
user:
  id: 1001
  username: johndoe
  email: john.doe@example.com
  profile:
    first_name: John
    last_name: Doe
    age: 30
---
type: project
metadata:
  version: 1.0
  created_at: 2023-05-16T09:15:00Z
project:
  id: 2001
  name: Data Warehouse Migration
  status: in_progress
  priority: high
  team:
    - user_id: 1001
      role: Project Lead
    - user_id: 1002
      role: Data Engineer');

# Test yaml_to_json with complex multi-document YAML
query I
SELECT yaml_to_json(y) AS json_value FROM complex_yaml;
----
[{"type":"user","metadata":{"version":1.0,"created_at":"2023-05-15T10:30:00Z"},"user":{"id":1001,"username":"johndoe","email":"john.doe@example.com","profile":{"first_name":"John","last_name":"Doe","age":30}}},{"type":"project","metadata":{"version":1.0,"created_at":"2023-05-16T09:15:00Z"},"project":{"id":2001,"name":"Data Warehouse Migration","status":"in_progress","priority":"high","team":[{"user_id":1001,"role":"Project Lead"},{"user_id":1002,"role":"Data Engineer"}]}}]

# Test using JSON functions after YAML conversion
query I
SELECT json_extract_string(yaml_to_json(y), '$[0].user.username') AS username FROM complex_yaml;
----
johndoe

query I
SELECT json_extract_string(yaml_to_json(y), '$[1].project.name') AS project_name FROM complex_yaml;
----
Data Warehouse Migration

query I
SELECT json_extract_string(yaml_to_json(y), '$[1].project.team[0].role') AS lead_role FROM complex_yaml;
----
Project Lead

# Test round-trip conversion (YAML → JSON → YAML)
statement ok
CREATE TABLE roundtrip AS 
SELECT value_to_yaml(yaml_to_json(y::YAML)) AS converted_yaml FROM complex_yaml;

# Verify that the structure is preserved in round-trip conversion
query I
SELECT yaml_to_json(y) = yaml_to_json(converted_yaml) AS structures_match FROM complex_yaml, roundtrip;
----
true

# Test with YAML anchors and aliases (not fully supported yet, but should not crash)
statement ok
CREATE TABLE yaml_anchors(y YAML);

statement ok
INSERT INTO yaml_anchors VALUES 
('{defaults: &defaults {adapter: postgres, host: localhost, port: 5432}, development: {database: myapp_development, <<: *defaults}, test: {database: myapp_test, <<: *defaults}}');

# Should convert to JSON without errors, though anchors might not be fully resolved
query I
SELECT yaml_to_json(y) IS NOT NULL AS conversion_works FROM yaml_anchors;
----
true

# YAML parser is very resilient, so let's skip the invalid YAML test
# since it's handling most malformed inputs in some way
statement ok
SELECT yaml_to_json('&*%@#^!:');

# Test error handling with invalid JSON
statement error
SELECT value_to_yaml('{invalid json}'::JSON);
----
Conversion Error: Malformed JSON

# Clean up
statement ok
DROP TABLE complex_yaml;

statement ok
DROP TABLE roundtrip;

statement ok
DROP TABLE yaml_anchors;
