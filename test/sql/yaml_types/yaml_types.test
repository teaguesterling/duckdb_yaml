# name: test/sql/yaml_types/yaml_types.test
# description: Test YAML types and conversion functions
# group: [yaml]

require yaml

# Test YAML type registration
statement ok
CREATE TABLE yaml_values(y YAML);

# Test inserting YAML values
statement ok
INSERT INTO yaml_values VALUES ('name: John'), ('age: 30'), ('tags: [developer, admin]'), ('person: {name: John, age: 30}');

# Verify the values were inserted correctly
query I
SELECT y FROM yaml_values ORDER BY y;
----
age: 30
name: John
person: {name: John, age: 30}
tags: [developer, admin]

# Test yaml_to_json function
query I
SELECT yaml_to_json('name: John') AS json_value;
----
{"name":"John"}

query I
SELECT yaml_to_json('age: 30') AS json_value;
----
{"age":30}

query I
SELECT yaml_to_json('is_valid: true') AS json_value;
----
{"is_valid":true}

query I
SELECT yaml_to_json('data: [1, 2, 3]') AS json_value;
----
{"data":[1,2,3]}

query I
SELECT yaml_to_json('person: {name: John, age: 30}') AS json_value;
----
{"person":{"name":"John","age":30}}

# Test multi-document YAML to JSON conversion
query I
SELECT yaml_to_json('---
name: John
---
name: Jane') AS json_value;
----
[{"name":"John"},{"name":"Jane"}]

# Test YAML to JSON cast
query I
SELECT y::JSON AS json_val FROM yaml_values ORDER BY y;
----
{"age":30}
{"name":"John"}
{"person":{"name":"John","age":30}}
{"tags":["developer","admin"]}

# Test JSON to YAML function
query I
SELECT json_to_yaml('{"name":"John"}') AS yaml_value;
----
name: John

query I
SELECT json_to_yaml('{"age":30}') AS yaml_value;
----
age: 30

query I
SELECT json_to_yaml('{"is_valid":true}') AS yaml_value;
----
is_valid: true

query I
SELECT json_to_yaml('{"data":[1,2,3]}') AS yaml_value;
----
data: 
- 1
- 2
- 3

query I
SELECT json_to_yaml('{"person":{"name":"John","age":30}}') AS yaml_value;
----
person: 
  name: John
  age: 30

# Test value_to_yaml function
query I
SELECT value_to_yaml('Simple string') AS yaml_value;
----
Simple string

query I
SELECT value_to_yaml(42) AS yaml_value;
----
42

query I
SELECT value_to_yaml(3.14) AS yaml_value;
----
3.140000

query I
SELECT value_to_yaml(TRUE) AS yaml_value;
----
true

# Test value_to_yaml with complex types
query I
SELECT value_to_yaml(['a', 'b', 'c']) AS yaml_value;
----
- a
- b
- c

query I
SELECT value_to_yaml({'name': 'John', 'age': 30}) AS yaml_value;
----
name: John
age: 30

# Test handling of special YAML values
query I
SELECT yaml_to_json('special_values:
  null_value: null
  tilde_null: ~
  true_values: [true, yes, on]
  false_values: [false, no, off]') AS json_value;
----
{"special_values":{"null_value":null,"tilde_null":null,"true_values":[true,true,true],"false_values":[false,false,false]}}

# Test handling of quoted strings in YAML
query I
SELECT yaml_to_json('quoted_strings:
  double_quoted: "This is a \"quoted\" string"
  single_quoted: ''Single quotes don''t need escaping''
  multiline: >
    This is a multiline
    string that will be
    folded into a single line.
  literal: |
    This is a multiline string
    that will preserve
    line breaks.') AS json_value;
----
{"quoted_strings":{"double_quoted":"This is a \"quoted\" string","single_quoted":"Single quotes don't need escaping","multiline":"This is a multiline string that will be folded into a single line.","literal":"This is a multiline string\nthat will preserve\nline breaks.\n"}}

# Clean up
statement ok
DROP TABLE yaml_values;
